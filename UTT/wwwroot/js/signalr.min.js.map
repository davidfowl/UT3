{"version":3,"sources":["webpack://signalR/webpack/universalModuleDefinition","webpack://signalR/webpack/bootstrap","webpack://signalR/webpack/runtime/define property getters","webpack://signalR/webpack/runtime/global","webpack://signalR/webpack/runtime/hasOwnProperty shorthand","webpack://signalR/webpack/runtime/make namespace object","webpack://signalR/src/ILogger.ts","webpack://signalR/src/Errors.ts","webpack://signalR/src/HttpClient.ts","webpack://signalR/src/Loggers.ts","webpack://signalR/src/Utils.ts","webpack://signalR/src/FetchHttpClient.ts","webpack://signalR/src/XhrHttpClient.ts","webpack://signalR/src/DefaultHttpClient.ts","webpack://signalR/src/TextMessageFormat.ts","webpack://signalR/src/HandshakeProtocol.ts","webpack://signalR/src/IHubProtocol.ts","webpack://signalR/src/HubConnection.ts","webpack://signalR/src/Subject.ts","webpack://signalR/src/DefaultReconnectPolicy.ts","webpack://signalR/src/HeaderNames.ts","webpack://signalR/src/ITransport.ts","webpack://signalR/src/AbortController.ts","webpack://signalR/src/LongPollingTransport.ts","webpack://signalR/src/ServerSentEventsTransport.ts","webpack://signalR/src/WebSocketTransport.ts","webpack://signalR/src/HttpConnection.ts","webpack://signalR/src/JsonHubProtocol.ts","webpack://signalR/src/HubConnectionBuilder.ts","webpack://signalR/src/browser-index.ts"],"names":["root","factory","self","__webpack_require__","d","exports","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","LogLevel","HttpError","Error","[object Object]","errorMessage","statusCode","trueProto","super","__proto__","TimeoutError","AbortError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","AggregateErrors","innerErrors","HttpResponse","statusText","content","HttpClient","url","options","send","method","t","Trace","Debug","Information","Warning","Critical","None","NullLogger","_logLevel","_message","instance","VERSION","Arg","val","name","match","values","Platform","isBrowser","isWebWorker","isNode","getDataDetail","data","includeContent","detail","isArrayBuffer","byteLength","view","Uint8Array","str","forEach","num","toString","substr","length","ArrayBuffer","constructor","async","sendMessage","logger","transportName","httpClient","accessTokenFactory","headers","token","Authorization","getUserAgentHeader","log","logMessageContent","responseType","response","post","timeout","withCredentials","SubjectSubscription","subject","observer","_subject","_observer","index","observers","indexOf","splice","cancelCallback","catch","_","ConsoleLogger","minimumLogLevel","_minLevel","out","console","logLevel","msg","Date","toISOString","error","warn","info","userAgentHeaderName","constructUserAgent","getOsName","getRuntimeVersion","version","os","runtime","runtimeVersion","userAgent","majorAndMinor","split","process","platform","versions","node","getErrorString","stack","FetchHttpClient","_logger","fetch","requireFunc","require","_jar","CookieJar","_fetchType","bind","AbortController","_abortControllerType","request","abortSignal","aborted","abortController","onabort","abort","timeoutId","msTimeout","setTimeout","body","cache","credentials","Content-Type","X-Requested-With","mode","redirect","signal","clearTimeout","ok","deserializeContent","status","payload","cookies","getCookies","c","join","arrayBuffer","text","XhrHttpClient","Promise","reject","resolve","xhr","XMLHttpRequest","open","setRequestHeader","keys","header","onload","responseText","onerror","ontimeout","DefaultHttpClient","_httpClient","getCookieString","TextMessageFormat","output","RecordSeparator","input","messages","pop","H","RecordSeparatorCode","String","fromCharCode","HandshakeProtocol","handshakeRequest","write","JSON","stringify","messageData","remainingData","binaryData","separatorIndex","responseLength","apply","Array","slice","buffer","textData","substring","parse","type","MessageType","HubConnectionState","Invocation","StreamItem","Completion","StreamInvocation","CancelInvocation","Ping","Close","Subject","item","next","err","complete","push","Disconnected","Connecting","Connected","Disconnecting","Reconnecting","HubConnection","connection","protocol","reconnectPolicy","_nextKeepAlive","_freezeEventListener","isRequired","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","_protocol","_reconnectPolicy","_handshakeProtocol","onreceive","_processIncomingData","onclose","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","_connectionState","_connectionStarted","_cachedPingMessage","writeMessage","state","connectionId","baseUrl","_startPromise","_startWithStateTransitions","_startInternal","document","addEventListener","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","start","transferFormat","_sendMessage","writeHandshakeRequest","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_cleanupPingTimer","stop","startPromise","_stopPromise","_stopInternal","_reconnectDelayHandle","_completeClose","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","cancelInvocation","_createCancelInvocation","invocationId","then","_sendWithProtocol","invocationEvent","_launchStreams","sendPromise","_createInvocation","result","newMethod","toLowerCase","handlers","removeIdx","callback","_processHandshakeResponse","parseMessages","_invokeClientMethod","undefined","allowReconnect","responseMessage","parseHandshakeResponse","features","inherentKeepAlive","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","methods","target","m","arguments","_cancelCallbacksWithError","_reconnect","removeEventListener","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","previousRetryCount","elapsedMilliseconds","retryReason","nextRetryDelayInMilliseconds","callbacks","nonblocking","streamId","subscribe","_createCompletionMessage","_createStreamItemMessage","i","argument","_isObservable","arg","id","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","retryContext","HeaderNames","HttpTransportType","TransferFormat","q","Cookie","WebSockets","ServerSentEvents","LongPolling","Text","Binary","W","_isAborted","LongPollingTransport","_accessTokenFactory","_pollAbort","_options","_running","pollAborted","isIn","_url","pollOptions","_getAccessToken","_updateHeaderToken","pollUrl","_closeError","_receiving","_poll","_raiseOnClose","deleteOptions","delete","logMessage","ServerSentEventsTransport","encodeURIComponent","eventSource","opened","EventSource","onmessage","_close","onopen","_eventSource","close","WebSocketTransport","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","reason","HttpConnection","_stopPromiseResolver","_negotiateVersion","_resolveUrl","webSocketModule","eventSourceModule","WebSocket","_startInternalPromise","_sendQueue","TransportSendQueue","_stopError","_stopConnection","skipNegotiation","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_createTransport","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","requestedTransport","requestedTransferFormat","connectUrl","_createConnectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","ex","connect","actualTransport","transferFormats","map","s","lastIndexOf","aTag","createElement","href","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","ie","transportResult","_concatBuffers","arrayBuffers","totalLength","b","reduce","a","offset","set","_resolver","_rejecter","JsonHubProtocol","hubMessages","parsedMessage","_isInvocationMessage","_isStreamItemMessage","_isCompletionMessage","_assertNotEmptyString","LogLevelNameMapping","trace","debug","information","warning","critical","none","HubConnectionBuilder","logging","mapping","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","retryDelaysOrReconnectPolicy","isArray","create","writable","end","module","define","amd","signalR"],"mappings":"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","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"signalR\"] = factory();\n\telse\n\t\troot[\"signalR\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport enum LogLevel {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    Trace = 0,\r\n    /** Log level for low severity diagnostic messages. */\r\n    Debug = 1,\r\n    /** Log level for informational diagnostic messages. */\r\n    Information = 2,\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    Warning = 3,\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    Error = 4,\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    Critical = 5,\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    None = 6,\r\n}\r\n\r\n/** An abstraction that provides a sink for diagnostic messages. */\r\nexport interface ILogger {\r\n    /** Called by the framework to emit a diagnostic message.\r\n     *\r\n     * @param {LogLevel} logLevel The severity level of the message.\r\n     * @param {string} message The message.\r\n     */\r\n    log(logLevel: LogLevel, message: string): void;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpTransportType } from \"./ITransport\";\r\n\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The HTTP status code represented by this error. */\r\n    public statusCode: number;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage: string, statusCode: number) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage: string = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The {@link @microsoft/signalr.HttpTransportType} this error occured on. */\r\n    public transport: HttpTransportType;\r\n\r\n    /** The type name of this error. */\r\n    public errorType: string;\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occured on.\r\n     */\r\n    constructor(message: string, transport: HttpTransportType) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n\r\n/** Error thrown when multiple errors have occured. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    // @ts-ignore: Intentionally unused.\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private __proto__: Error;\r\n\r\n    /** The collection of errors this error is aggregating. */\r\n    public innerErrors: Error[];\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message: string, innerErrors: Error[]) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n\r\n        this.innerErrors = innerErrors;\r\n\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: MessageHeaders;\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n\r\n    /** This controls whether credentials such as cookies are sent in cross-site requests. */\r\n    withCredentials?: boolean;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string | ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string | ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @microsoft/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @microsoft/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @microsoft/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    public getCookieString(url: string): string {\r\n        return \"\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger implements ILogger {\r\n    /** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\n    public static instance: ILogger = new NullLogger();\r\n\r\n    private constructor() {}\r\n\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    public log(_logLevel: LogLevel, _message: string): void {\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\n\r\nexport const VERSION: string = \"0.0.0-DEV_BUILD\";\r\n/** @private */\r\nexport class Arg {\r\n    public static isRequired(val: any, name: string): void {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    public static isNotEmpty(val: string, name: string): void {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n\r\n    public static isIn(val: any, values: any, name: string): void {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class Platform {\r\n    public static get isBrowser(): boolean {\r\n        return typeof window === \"object\";\r\n    }\r\n\r\n    public static get isWebWorker(): boolean {\r\n        return typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n\r\n    public static get isNode(): boolean {\r\n        return !this.isBrowser && !this.isWebWorker;\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getDataDetail(data: any, includeContent: boolean): string {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    } else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n\r\n/** @private */\r\nexport function formatArrayBuffer(data: ArrayBuffer): string {\r\n    const view = new Uint8Array(data);\r\n\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n\r\n/** @private */\r\nexport async function sendMessage(logger: ILogger, transportName: string, httpClient: HttpClient, url: string, accessTokenFactory: (() => string | Promise<string>) | undefined,\r\n                                  content: string | ArrayBuffer, options: IHttpConnectionOptions): Promise<void> {\r\n    let headers: {[k: string]: string} = {};\r\n    if (accessTokenFactory) {\r\n        const token = await accessTokenFactory();\r\n        if (token) {\r\n            headers = {\r\n                [\"Authorization\"]: `Bearer ${token}`,\r\n            };\r\n        }\r\n    }\r\n\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent!)}.`);\r\n\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers},\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n\r\n/** @private */\r\nexport function createLogger(logger?: ILogger | LogLevel): ILogger {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n\r\n    if ((logger as ILogger).log !== undefined) {\r\n        return logger as ILogger;\r\n    }\r\n\r\n    return new ConsoleLogger(logger as LogLevel);\r\n}\r\n\r\n/** @private */\r\nexport class SubjectSubscription<T> implements ISubscription<T> {\r\n    private _subject: Subject<T>;\r\n    private _observer: IStreamSubscriber<T>;\r\n\r\n    constructor(subject: Subject<T>, observer: IStreamSubscriber<T>) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n\r\n    public dispose(): void {\r\n        const index: number = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport class ConsoleLogger implements ILogger {\r\n    private readonly _minLevel: LogLevel;\r\n\r\n    // Public for testing purposes.\r\n    public out: {\r\n        error(message: any): void,\r\n        warn(message: any): void,\r\n        info(message: any): void,\r\n        log(message: any): void,\r\n    };\r\n\r\n    constructor(minimumLogLevel: LogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n\r\n    public log(logLevel: LogLevel, message: string): void {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getUserAgentHeader(): [string, string] {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [ userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion()) ];\r\n}\r\n\r\n/** @private */\r\nexport function constructUserAgent(version: string, os: string, runtime: string, runtimeVersion: string | undefined): string {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent: string = \"Microsoft SignalR/\";\r\n\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    } else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n\r\n    userAgent += `${runtime}`;\r\n\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    } else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName(): string {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion(): string | undefined {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction getRuntime(): string {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    } else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n\r\n/** @private */\r\nexport function getErrorString(e: any): string {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    } else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n\r\n/** @private */\r\nexport function getGlobalThis() {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis } from \"./Utils\";\r\n\r\nexport class FetchHttpClient extends HttpClient {\r\n    private readonly _abortControllerType: { prototype: AbortController, new(): AbortController };\r\n    private readonly _fetchType: (input: RequestInfo, init?: RequestInit) => Promise<Response>;\r\n    private readonly _jar?: CookieJar;\r\n\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            this._fetchType = requireFunc(\"node-fetch\");\r\n\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        } else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        } else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public async send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n\r\n        const abortController = new this._abortControllerType();\r\n\r\n        let error: any;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId: any = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout!;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n\r\n        let response: Response;\r\n        try {\r\n            response = await this._fetchType(request.url!, {\r\n                body: request.content!,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"Content-Type\": \"text/plain;charset=UTF-8\",\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method!,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        } catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(\r\n                LogLevel.Warning,\r\n                `Error from HTTP request. ${e}.`,\r\n            );\r\n            throw e;\r\n        } finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\") as string;\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n\r\n        return new HttpResponse(\r\n            response.status,\r\n            response.statusText,\r\n            payload,\r\n        );\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        let cookies: string = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\n\r\nfunction deserializeContent(response: Response, responseType?: XMLHttpRequestResponseType): Promise<string | ArrayBuffer> {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n\r\n    return content;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\nexport class XhrHttpClient extends HttpClient {\r\n    private readonly _logger: ILogger;\r\n\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method!, request.url!, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                        xhr.setRequestHeader(header, headers[header]);\r\n                    });\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\r\nimport { ILogger } from \"./ILogger\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly _httpClient: HttpClient;\r\n\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        } else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        } else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n\r\n        return this._httpClient.send(request);\r\n    }\r\n\r\n    public getCookieString(url: string): string {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    public static RecordSeparatorCode = 0x1e;\r\n    public static RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n\r\n    public static write(output: string): string {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n\r\n    public static parse(input: string): string[] {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n\r\n/** @private */\r\nexport interface HandshakeRequestMessage {\r\n    readonly protocol: string;\r\n    readonly version: number;\r\n}\r\n\r\n/** @private */\r\nexport interface HandshakeResponseMessage {\r\n    readonly error: string;\r\n    readonly minorVersion: number;\r\n}\r\n\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    public writeHandshakeRequest(handshakeRequest: HandshakeRequestMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n\r\n    public parseHandshakeResponse(data: any): [any, HandshakeResponseMessage] {\r\n        let messageData: string;\r\n        let remainingData: any;\r\n\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        } else {\r\n            const textData: string = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage: HandshakeResponseMessage = response;\r\n\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { ILogger } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\n\r\n/** Defines the type of a Hub Message. */\r\nexport enum MessageType {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    Invocation = 1,\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    StreamItem = 2,\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    Completion = 3,\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    StreamInvocation = 4,\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    CancelInvocation = 5,\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    Ping = 6,\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    Close = 7,\r\n}\r\n\r\n/** Defines a dictionary of string keys and string values representing headers attached to a Hub message. */\r\nexport interface MessageHeaders {\r\n    /** Gets or sets the header with the specified key. */\r\n    [key: string]: string;\r\n}\r\n\r\n/** Union type of all known Hub messages. */\r\nexport type HubMessage =\r\n    InvocationMessage |\r\n    StreamInvocationMessage |\r\n    StreamItemMessage |\r\n    CompletionMessage |\r\n    CancelInvocationMessage |\r\n    PingMessage |\r\n    CloseMessage;\r\n\r\n/** Defines properties common to all Hub messages. */\r\nexport interface HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageType} value indicating the type of this message. */\r\n    readonly type: MessageType;\r\n}\r\n\r\n/** Defines properties common to all Hub messages relating to a specific invocation. */\r\nexport interface HubInvocationMessage extends HubMessageBase {\r\n    /** A {@link @microsoft/signalr.MessageHeaders} dictionary containing headers attached to the message. */\r\n    readonly headers?: MessageHeaders;\r\n    /** The ID of the invocation relating to this message.\r\n     *\r\n     * This is expected to be present for {@link @microsoft/signalr.StreamInvocationMessage} and {@link @microsoft/signalr.CompletionMessage}. It may\r\n     * be 'undefined' for an {@link @microsoft/signalr.InvocationMessage} if the sender does not expect a response.\r\n     */\r\n    readonly invocationId?: string;\r\n}\r\n\r\n/** A hub message representing a non-streaming invocation. */\r\nexport interface InvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Invocation;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a streaming invocation. */\r\nexport interface StreamInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamInvocation;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The target method name. */\r\n    readonly target: string;\r\n    /** The target method arguments. */\r\n    readonly arguments: any[];\r\n    /** The target methods stream IDs. */\r\n    readonly streamIds?: string[];\r\n}\r\n\r\n/** A hub message representing a single item produced as part of a result stream. */\r\nexport interface StreamItemMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.StreamItem;\r\n\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n\r\n    /** The item produced by the server. */\r\n    readonly item?: any;\r\n}\r\n\r\n/** A hub message representing the result of an invocation. */\r\nexport interface CompletionMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Completion;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n    /** The error produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly error?: string;\r\n    /** The result produced by the invocation, if any.\r\n     *\r\n     * Either {@link @microsoft/signalr.CompletionMessage.error} or {@link @microsoft/signalr.CompletionMessage.result} must be defined, but not both.\r\n     */\r\n    readonly result?: any;\r\n}\r\n\r\n/** A hub message indicating that the sender is still active. */\r\nexport interface PingMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Ping;\r\n}\r\n\r\n/** A hub message indicating that the sender is closing the connection.\r\n *\r\n * If {@link @microsoft/signalr.CloseMessage.error} is defined, the sender is closing the connection due to an error.\r\n */\r\nexport interface CloseMessage extends HubMessageBase {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.Close;\r\n    /** The error that triggered the close, if any.\r\n     *\r\n     * If this property is undefined, the connection was closed normally and without error.\r\n     */\r\n    readonly error?: string;\r\n\r\n    /** If true, clients with automatic reconnects enabled should attempt to reconnect after receiving the CloseMessage. Otherwise, they should not. */\r\n    readonly allowReconnect?: boolean;\r\n}\r\n\r\n/** A hub message sent to request that a streaming invocation be canceled. */\r\nexport interface CancelInvocationMessage extends HubInvocationMessage {\r\n    /** @inheritDoc */\r\n    readonly type: MessageType.CancelInvocation;\r\n    /** The invocation ID. */\r\n    readonly invocationId: string;\r\n}\r\n\r\n/** A protocol abstraction for communicating with SignalR Hubs.  */\r\nexport interface IHubProtocol {\r\n    /** The name of the protocol. This is used by SignalR to resolve the protocol between the client and server. */\r\n    readonly name: string;\r\n    /** The version of the protocol. */\r\n    readonly version: number;\r\n    /** The {@link @microsoft/signalr.TransferFormat} of the protocol. */\r\n    readonly transferFormat: TransferFormat;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the `input` parameter must be a string, otherwise it must be an ArrayBuffer.\r\n     *\r\n     * @param {string | ArrayBuffer} input A string or ArrayBuffer containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input: string | ArrayBuffer, logger: ILogger): HubMessage[];\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string or ArrayBuffer and returns it.\r\n     *\r\n     * If {@link @microsoft/signalr.IHubProtocol.transferFormat} is 'Text', the result of this method will be a string, otherwise it will be an ArrayBuffer.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string | ArrayBuffer} A string or ArrayBuffer containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message: HubMessage): string | ArrayBuffer;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HandshakeProtocol, HandshakeRequestMessage, HandshakeResponseMessage } from \"./HandshakeProtocol\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { CancelInvocationMessage, CompletionMessage, IHubProtocol, InvocationMessage, MessageType, StreamInvocationMessage, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { IStreamResult } from \"./Stream\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS: number = 15 * 1000;\r\n\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport enum HubConnectionState {\r\n    /** The hub connection is disconnected. */\r\n    Disconnected = \"Disconnected\",\r\n    /** The hub connection is connecting. */\r\n    Connecting = \"Connecting\",\r\n    /** The hub connection is connected. */\r\n    Connected = \"Connected\",\r\n    /** The hub connection is disconnecting. */\r\n    Disconnecting = \"Disconnecting\",\r\n    /** The hub connection is reconnecting. */\r\n    Reconnecting = \"Reconnecting\",\r\n}\r\n\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    private readonly _cachedPingMessage: string | ArrayBuffer;\r\n    // Needs to not start with _ for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private readonly connection: IConnection;\r\n    private readonly _logger: ILogger;\r\n    private readonly _reconnectPolicy?: IRetryPolicy;\r\n    private _protocol: IHubProtocol;\r\n    private _handshakeProtocol: HandshakeProtocol;\r\n    private _callbacks: { [invocationId: string]: (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => void };\r\n    private _methods: { [name: string]: ((...args: any[]) => void)[] };\r\n    private _invocationId: number;\r\n\r\n    private _closedCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectingCallbacks: ((error?: Error) => void)[];\r\n    private _reconnectedCallbacks: ((connectionId?: string) => void)[];\r\n\r\n    private _receivedHandshakeResponse: boolean;\r\n    private _handshakeResolver!: (value?: PromiseLike<{}>) => void;\r\n    private _handshakeRejecter!: (reason?: any) => void;\r\n    private _stopDuringStartError?: Error;\r\n\r\n    private _connectionState: HubConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private _startPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _nextKeepAlive: number = 0;\r\n\r\n    // The type of these a) doesn't matter and b) varies when building in browser and node contexts\r\n    // Since we're building the WebPack bundle directly from the TypeScript, this matters (previously\r\n    // we built the bundle from the compiled JavaScript).\r\n    private _reconnectDelayHandle?: any;\r\n    private _timeoutHandle?: any;\r\n    private _pingServerHandle?: any;\r\n\r\n    private _freezeEventListener = () =>\r\n    {\r\n        this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://docs.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n    };\r\n\r\n    /** The server timeout in milliseconds.\r\n     *\r\n     * If this timeout elapses without receiving any messages from the server, the connection will be terminated with an error.\r\n     * The default timeout value is 30,000 milliseconds (30 seconds).\r\n     */\r\n    public serverTimeoutInMilliseconds: number;\r\n\r\n    /** Default interval at which to ping the server.\r\n     *\r\n     * The default value is 15,000 milliseconds (15 seconds).\r\n     * Allows the server to detect hard disconnects (like when a client unplugs their computer).\r\n     * The ping will happen at most as often as the server pings.\r\n     * If the server pings every 5 seconds, a value lower than 5 will ping every 5 seconds.\r\n     */\r\n    public keepAliveIntervalInMilliseconds: number;\r\n\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    public static create(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy): HubConnection {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy);\r\n    }\r\n\r\n    private constructor(connection: IConnection, logger: ILogger, protocol: IHubProtocol, reconnectPolicy?: IRetryPolicy) {\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.serverTimeoutInMilliseconds = DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = DEFAULT_PING_INTERVAL_IN_MS;\r\n\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n\r\n        this.connection.onreceive = (data: any) => this._processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this._connectionClosed(error);\r\n\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state(): HubConnectionState {\r\n        return this._connectionState;\r\n    }\r\n\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId(): string | null {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl(): string {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url: string) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n\r\n        this.connection.baseUrl = url;\r\n    }\r\n\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    public start(): Promise<void> {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n\r\n    private async _startWithStateTransitions(): Promise<void> {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n\r\n        try {\r\n            await this._startInternal();\r\n\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                    document.addEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        } catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n\r\n        await this.connection.start(this._protocol.transferFormat);\r\n\r\n        try {\r\n            const handshakeRequest: HandshakeRequestMessage = {\r\n                protocol: this._protocol.name,\r\n                version: this._protocol.version,\r\n            };\r\n\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n\r\n            await handshakePromise;\r\n\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    public async stop(): Promise<void> {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n\r\n    private _stopInternal(error?: Error): Promise<void> {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise!;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new Error(\"The connection was stopped before the hub handshake could complete.\");\r\n\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    public stream<T = any>(methodName: string, ...args: any[]): IStreamResult<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue: Promise<void>;\r\n\r\n        const subject = new Subject<T>();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation: CancelInvocationMessage = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent: CompletionMessage | StreamItemMessage | null, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            } else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    } else {\r\n                        subject.complete();\r\n                    }\r\n                } else {\r\n                    subject.next((invocationEvent.item) as T);\r\n                }\r\n            }\r\n        };\r\n\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n                subject.error(e);\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n\r\n        this._launchStreams(streams, promiseQueue);\r\n\r\n        return subject;\r\n    }\r\n\r\n    private _sendMessage(message: any) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    private _sendWithProtocol(message: any) {\r\n        return this._sendMessage(this._protocol.writeMessage(message));\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    public send(methodName: string, ...args: any[]): Promise<void> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n\r\n        this._launchStreams(streams, sendPromise);\r\n\r\n        return sendPromise;\r\n    }\r\n\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    public invoke<T = any>(methodName: string, ...args: any[]): Promise<T> {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n\r\n        const p = new Promise<any>((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId!] = (invocationEvent: StreamItemMessage | CompletionMessage | null, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                } else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        } else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    } else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                    reject(e);\r\n                    // invocationId will always have a value for a non-blocking invocation\r\n                    delete this._callbacks[invocationDescriptor.invocationId!];\r\n                });\r\n\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the hub method with the specified method name is invoked.\r\n     *\r\n     * @param {string} methodName The name of the hub method to define.\r\n     * @param {Function} newMethod The handler that will be raised when the hub method is invoked.\r\n     */\r\n    public on(methodName: string, newMethod: (...args: any[]) => void): void {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n\r\n    /** Removes all handlers for the specified hub method.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     */\r\n    public off(methodName: string): void;\r\n\r\n    /** Removes the specified handler for the specified hub method.\r\n     *\r\n     * You must pass the exact same Function instance as was previously passed to {@link @microsoft/signalr.HubConnection.on}. Passing a different instance (even if the function\r\n     * body is the same) will not remove the handler.\r\n     *\r\n     * @param {string} methodName The name of the method to remove handlers for.\r\n     * @param {Function} method The handler to remove. This must be the same Function instance as the one passed to {@link @microsoft/signalr.HubConnection.on}.\r\n     */\r\n    public off(methodName: string, method: (...args: any[]) => void): void;\r\n    public off(methodName: string, method?: (...args: any[]) => void): void {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        } else {\r\n            delete this._methods[methodName];\r\n        }\r\n\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    public onclose(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    public onreconnecting(callback: (error?: Error) => void): void {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    public onreconnected(callback: (connectionId?: string) => void): void {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private _processIncomingData(data: any) {\r\n        this._cleanupTimeout();\r\n\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n\r\n            for (const message of messages) {\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message);\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            } catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        } else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._resetTimeoutPeriod();\r\n    }\r\n\r\n    private _processHandshakeResponse(data: any): any {\r\n        let responseMessage: HandshakeResponseMessage;\r\n        let remainingData: any;\r\n\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        } catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n\r\n    private _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n\r\n        this._cleanupPingTimer();\r\n    }\r\n\r\n    private _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined)\r\n            {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        } catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private _invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        const methods = this._methods[invocationMessage.target.toLowerCase()];\r\n        if (methods) {\r\n            try {\r\n                methods.forEach((m) => m.apply(this, invocationMessage.arguments));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `A callback for the method ${invocationMessage.target.toLowerCase()} threw error '${e}'.`);\r\n            }\r\n\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                const message = \"Server requested a response, which is not supported in this version of the client.\";\r\n                this._logger.log(LogLevel.Error, message);\r\n\r\n                // We don't want to wait on the stop itself.\r\n                this._stopPromise = this._stopInternal(new Error(message));\r\n            }\r\n        } else {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private _connectionClosed(error?: Error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new Error(\"The underlying connection was closed before the hub handshake could complete.\");\r\n\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        } else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n\r\n    private _completeClose(error?: Error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n\r\n            if (Platform.isBrowser) {\r\n                if (document) {\r\n                    document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n                }\r\n            }\r\n\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private async _reconnect(error?: Error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay!);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n\r\n            try {\r\n                await this._startInternal();\r\n\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    } catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n\r\n                return;\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState as any === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n\r\n        this._completeClose();\r\n    }\r\n\r\n    private _getNextRetryDelay(previousRetryCount: number, elapsedMilliseconds: number, retryReason: Error) {\r\n        try {\r\n            return this._reconnectPolicy!.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private _cancelCallbacksWithError(error: Error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n                const callback = callbacks[key];\r\n                try {\r\n                    callback(null, error);\r\n                } catch (e) {\r\n                    this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    private _cleanupPingTimer(): void {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n\r\n    private _cleanupTimeout(): void {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private _createInvocation(methodName: string, args: any[], nonblocking: boolean, streamIds: string[]): InvocationMessage {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        } else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            } else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    private _launchStreams(streams: IStreamResult<any>[], promiseQueue: Promise<void>): void {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message: string;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    } else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    } else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    private _replaceStreamingParams(args: any[]): [IStreamResult<any>[], string[]] {\r\n        const streams: IStreamResult<any>[] = [];\r\n        const streamIds: string[] = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n\r\n        return [streams, streamIds];\r\n    }\r\n\r\n    private _isObservable(arg: any): arg is IStreamResult<any> {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n\r\n    private _createStreamInvocation(methodName: string, args: any[], streamIds: string[]): StreamInvocationMessage {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        } else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n\r\n    private _createCancelInvocation(id: string): CancelInvocationMessage {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n\r\n    private _createStreamItemMessage(id: string, item: any): StreamItemMessage {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n\r\n    private _createCompletionMessage(id: string, error?: any, result?: any): CompletionMessage {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IStreamResult, IStreamSubscriber, ISubscription } from \"./Stream\";\r\nimport { SubjectSubscription } from \"./Utils\";\r\n\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject<T> implements IStreamResult<T> {\r\n    /** @internal */\r\n    public observers: IStreamSubscriber<T>[];\r\n\r\n    /** @internal */\r\n    public cancelCallback?: () => Promise<void>;\r\n\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n\r\n    public next(item: T): void {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n\r\n    public error(err: any): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    public complete(): void {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n\r\n    public subscribe(observer: IStreamSubscriber<T>): ISubscription<T> {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { IRetryPolicy, RetryContext } from \"./IRetryPolicy\";\r\n\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n\r\n/** @private */\r\nexport class DefaultReconnectPolicy implements IRetryPolicy {\r\n    private readonly _retryDelays: (number | null)[];\r\n\r\n    constructor(retryDelays?: number[]) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n\r\n    public nextRetryDelayInMilliseconds(retryContext: RetryContext): number | null {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nexport abstract class HeaderNames {\r\n    static readonly Authorization = \"Authorization\";\r\n    static readonly Cookie = \"Cookie\";\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport enum HttpTransportType {\r\n    /** Specifies no transport preference. */\r\n    None = 0,\r\n    /** Specifies the WebSockets transport. */\r\n    WebSockets = 1,\r\n    /** Specifies the Server-Sent Events transport. */\r\n    ServerSentEvents = 2,\r\n    /** Specifies the Long Polling transport. */\r\n    LongPolling = 4,\r\n}\r\n\r\n/** Specifies the transfer format for a connection. */\r\nexport enum TransferFormat {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    Text = 1,\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    Binary = 2,\r\n}\r\n\r\n/** An abstraction over the behavior of transports. This is designed to support the framework and not intended for use by applications. */\r\nexport interface ITransport {\r\n    connect(url: string, transferFormat: TransferFormat): Promise<void>;\r\n    send(data: any): Promise<void>;\r\n    stop(): Promise<void>;\r\n    onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    onclose: ((error?: Error) => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController implements AbortSignal {\r\n    private _isAborted: boolean = false;\r\n    public onabort: (() => void) | null = null;\r\n\r\n    public abort(): void {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n\r\n    get signal(): AbortSignal {\r\n        return this;\r\n    }\r\n\r\n    get aborted(): boolean {\r\n        return this._isAborted;\r\n    }\r\n}\r\n\r\n/** Represents a signal that can be monitored to determine if a request has been aborted. */\r\nexport interface AbortSignal {\r\n    /** Indicates if the request has been aborted. */\r\n    aborted: boolean;\r\n    /** Set this to a handler that will be invoked when the request is aborted. */\r\n    onabort: (() => void) | null;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient, HttpRequest } from \"./HttpClient\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private readonly _pollAbort: AbortController;\r\n\r\n    private _url?: string;\r\n    private _running: boolean;\r\n    private _receiving?: Promise<void>;\r\n    private _closeError?: Error;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    public get pollAborted(): boolean {\r\n        return this._pollAbort.aborted;\r\n    }\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n\r\n        this._running = false;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._url = url;\r\n\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n\r\n        const pollOptions: HttpRequest = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        const token = await this._getAccessToken();\r\n        this._updateHeaderToken(pollOptions, token);\r\n\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        } else {\r\n            this._running = true;\r\n        }\r\n\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n\r\n    private async _getAccessToken(): Promise<string | null> {\r\n        if (this._accessTokenFactory) {\r\n            return await this._accessTokenFactory();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private _updateHeaderToken(request: HttpRequest, token: string | null) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (token) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            return;\r\n        }\r\n        if (request.headers[HeaderNames.Authorization]) {\r\n            delete request.headers[HeaderNames.Authorization];\r\n        }\r\n    }\r\n\r\n    private async _poll(url: string, pollOptions: HttpRequest): Promise<void> {\r\n        try {\r\n            while (this._running) {\r\n                // We have to get the access token on each poll, in case it changes\r\n                const token = await this._getAccessToken();\r\n                this._updateHeaderToken(pollOptions, token);\r\n\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n\r\n                        this._running = false;\r\n                    } else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    } else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent!)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        } else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    } else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        } else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url!, this._accessTokenFactory, data, this._options);\r\n    }\r\n\r\n    public async stop(): Promise<void> {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n\r\n        try {\r\n            await this._receiving;\r\n\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n\r\n            const headers: {[k: string]: string} = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n\r\n            const deleteOptions: HttpRequest = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            const token = await this._getAccessToken();\r\n            this._updateHeaderToken(deleteOptions, token);\r\n            await this._httpClient.delete(this._url!, deleteOptions);\r\n\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request sent.\");\r\n        } finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n\r\n    private _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\n\r\n/** @private */\r\nexport class ServerSentEventsTransport implements ITransport {\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    private _eventSource?: EventSource;\r\n    private _url?: string;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                options: IHttpConnectionOptions) {\r\n        this._httpClient = httpClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logger = logger;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n\r\n        // set url before accessTokenFactory because this.url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n\r\n            let eventSource: EventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials });\r\n            } else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers: MessageHeaders = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                eventSource = new this._options.EventSource!(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers} } as EventSourceInit);\r\n            }\r\n\r\n            try {\r\n                eventSource.onmessage = (e: MessageEvent) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent!)}.`);\r\n                            this.onreceive(e.data);\r\n                        } catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e: Event) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    } else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n\r\n    public async send(data: any): Promise<void> {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url!, this._accessTokenFactory, data, this._options);\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(e?: Error) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { MessageHeaders } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { ITransport, TransferFormat } from \"./ITransport\";\r\nimport { WebSocketConstructor } from \"./Polyfills\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport class WebSocketTransport implements ITransport {\r\n    private readonly _logger: ILogger;\r\n    private readonly _accessTokenFactory: (() => string | Promise<string>) | undefined;\r\n    private readonly _logMessageContent: boolean;\r\n    private readonly _webSocketConstructor: WebSocketConstructor;\r\n    private readonly _httpClient: HttpClient;\r\n    private _webSocket?: WebSocket;\r\n    private _headers: MessageHeaders;\r\n\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((error?: Error) => void) | null;\r\n\r\n    constructor(httpClient: HttpClient, accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger,\r\n                logMessageContent: boolean, webSocketConstructor: WebSocketConstructor, headers: MessageHeaders) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n\r\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n            }\r\n        }\r\n\r\n        return new Promise<void>((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket: WebSocket | undefined;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n\r\n            if (Platform.isNode) {\r\n                const headers: {[k: string]: string} = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = `${cookies}`;\r\n                }\r\n\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n\r\n            webSocket.onopen = (_event: Event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n\r\n            webSocket.onerror = (event: Event) => {\r\n                let error: any = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                } else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n\r\n            webSocket.onmessage = (message: MessageEvent) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    } catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n\r\n            webSocket.onclose = (event: CloseEvent) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                } else {\r\n                    let error: any = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    } else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                        + \" either the endpoint may not be a SignalR endpoint,\"\r\n                        + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                        + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    public send(data: any): Promise<void> {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private _close(event?: CloseEvent | Error): void {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => {};\r\n            this._webSocket.onmessage = () => {};\r\n            this._webSocket.onerror = () => {};\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            } else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            } else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isCloseEvent(event?: any): event is CloseEvent {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToStartTransportError, HttpError, UnsupportedTransportError } from \"./Errors\";\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { IConnection } from \"./IConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, ITransport, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\n\r\n/** @private */\r\nconst enum ConnectionState {\r\n    Connecting = \"Connecting\",\r\n    Connected = \"Connected\",\r\n    Disconnected = \"Disconnected\",\r\n    Disconnecting = \"Disconnecting\",\r\n}\r\n\r\n/** @private */\r\nexport interface INegotiateResponse {\r\n    connectionId?: string;\r\n    connectionToken?: string;\r\n    negotiateVersion?: number;\r\n    availableTransports?: IAvailableTransport[];\r\n    url?: string;\r\n    accessToken?: string;\r\n    error?: string;\r\n}\r\n\r\n/** @private */\r\nexport interface IAvailableTransport {\r\n    transport: keyof typeof HttpTransportType;\r\n    transferFormats: (keyof typeof TransferFormat)[];\r\n}\r\n\r\nconst MAX_REDIRECTS = 100;\r\n\r\n/** @private */\r\nexport class HttpConnection implements IConnection {\r\n    private _connectionState: ConnectionState;\r\n    // connectionStarted is tracked independently from connectionState, so we can check if the\r\n    // connection ever did successfully transition from connecting to connected before disconnecting.\r\n    private _connectionStarted: boolean;\r\n    private readonly _httpClient: HttpClient;\r\n    private readonly _logger: ILogger;\r\n    private readonly _options: IHttpConnectionOptions;\r\n    // Needs to not start with _ to be available for tests\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    private transport?: ITransport;\r\n    private _startInternalPromise?: Promise<void>;\r\n    private _stopPromise?: Promise<void>;\r\n    private _stopPromiseResolver: (value?: PromiseLike<void>) => void = () => {};\r\n    private _stopError?: Error;\r\n    private _accessTokenFactory?: () => string | Promise<string>;\r\n    private _sendQueue?: TransportSendQueue;\r\n\r\n    public readonly features: any = {};\r\n    public baseUrl: string;\r\n    public connectionId?: string;\r\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\r\n    public onclose: ((e?: Error) => void) | null;\r\n\r\n    private readonly _negotiateVersion: number = 1;\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        Arg.isRequired(url, \"url\");\r\n\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        } else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n\r\n        let webSocketModule: any = null;\r\n        let eventSourceModule: any = null;\r\n\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        } else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        } else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n\r\n        this._httpClient = options.httpClient || new DefaultHttpClient(this._logger);\r\n        this._connectionState = ConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n\r\n    public start(): Promise<void>;\r\n    public start(transferFormat: TransferFormat): Promise<void>;\r\n    public async start(transferFormat?: TransferFormat): Promise<void> {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n\r\n        if (this._connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Connecting;\r\n\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState as any === ConnectionState.Disconnecting) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n\r\n            return Promise.reject(new Error(message));\r\n        } else if (this._connectionState as any !== ConnectionState.Connected) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new Error(message));\r\n        }\r\n\r\n        this._connectionStarted = true;\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        if (this._connectionState !== ConnectionState.Connected) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport!);\r\n        }\r\n\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n\r\n    public async stop(error?: Error): Promise<void> {\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n\r\n        this._connectionState = ConnectionState.Disconnecting;\r\n\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n\r\n    private async _stopInternal(error?: Error): Promise<void> {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n\r\n        try {\r\n            await this._startInternalPromise;\r\n        } catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n\r\n            this.transport = undefined;\r\n        } else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n\r\n    private async _startInternal(transferFormat: TransferFormat): Promise<void> {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                } else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            } else {\r\n                let negotiateResponse: INegotiateResponse | null = null;\r\n                let redirects = 0;\r\n\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === ConnectionState.Disconnecting || this._connectionState === ConnectionState.Disconnected) {\r\n                        throw new Error(\"The connection was stopped during negotiation.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n\r\n                    if ((negotiateResponse as any).ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                    }\r\n\r\n                    redirects++;\r\n                }\r\n                while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n\r\n            if (this._connectionState === ConnectionState.Connecting) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = ConnectionState.Connected;\r\n            }\r\n\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        } catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = ConnectionState.Disconnected;\r\n            this.transport = undefined;\r\n\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n\r\n    private async _getNegotiationResponse(url: string): Promise<INegotiateResponse> {\r\n        const headers: {[k: string]: string} = {};\r\n        if (this._accessTokenFactory) {\r\n            const token = await this._accessTokenFactory();\r\n            if (token) {\r\n                headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n            }\r\n        }\r\n\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n\r\n            const negotiateResponse = JSON.parse(response.content as string) as INegotiateResponse;\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            return negotiateResponse;\r\n        } catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n\r\n            return Promise.reject(new Error(errorMessage));\r\n        }\r\n    }\r\n\r\n    private _createConnectUrl(url: string, connectionToken: string | null | undefined) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n\r\n    private async _createTransport(url: string, requestedTransport: HttpTransportType | ITransport | undefined, negotiateResponse: INegotiateResponse, requestedTransferFormat: TransferFormat): Promise<void> {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n\r\n        const transportExceptions: any[] = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate: INegotiateResponse | undefined = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            } else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    } catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                } catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n\r\n                    if (this._connectionState !== ConnectionState.Connecting) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new Error(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n\r\n    private _constructTransport(transport: HttpTransportType): ITransport {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent!, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n\r\n    private _startTransport(url: string, transferFormat: TransferFormat): Promise<void> {\r\n        this.transport!.onreceive = this.onreceive;\r\n        this.transport!.onclose = (e) => this._stopConnection(e);\r\n        return this.transport!.connect(url, transferFormat);\r\n    }\r\n\r\n    private _resolveTransportOrError(endpoint: IAvailableTransport, requestedTransport: HttpTransportType | undefined, requestedTransferFormat: TransferFormat): ITransport | Error {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        } else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    } else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            return this._constructTransport(transport);\r\n                        } catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                } else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            } else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isITransport(transport: any): transport is ITransport {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private _stopConnection(error?: Error): void {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n\r\n        this.transport = undefined;\r\n\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n\r\n        if (this._connectionState === ConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Connecting) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n\r\n        if (this._connectionState === ConnectionState.Disconnecting) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n\r\n        this.connectionId = undefined;\r\n        this._connectionState = ConnectionState.Disconnected;\r\n\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            } catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (!Platform.isBrowser || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n\r\n    private _resolveNegotiateUrl(url: string): string {\r\n        const index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n\r\n        if (negotiateUrl.indexOf(\"negotiateVersion\") === -1) {\r\n            negotiateUrl += index === -1 ? \"?\" : \"&\";\r\n            negotiateUrl += \"negotiateVersion=\" + this._negotiateVersion;\r\n        }\r\n        return negotiateUrl;\r\n    }\r\n}\r\n\r\nfunction transportMatches(requestedTransport: HttpTransportType | undefined, actualTransport: HttpTransportType) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    private _buffer: any[] = [];\r\n    private _sendBufferedData: PromiseSource;\r\n    private _executing: boolean = true;\r\n    private _transportResult?: PromiseSource;\r\n    private _sendLoopPromise: Promise<void>;\r\n\r\n    constructor(private readonly _transport: ITransport) {\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n\r\n    public send(data: string | ArrayBuffer): Promise<void> {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n\r\n    public stop(): Promise<void> {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n\r\n    private _bufferData(data: string | ArrayBuffer): void {\r\n        if (this._buffer.length && typeof(this._buffer[0]) !== typeof(data)) {\r\n            throw new Error(`Expected data to be of type ${typeof(this._buffer)} but was of type ${typeof(data)}`);\r\n        }\r\n\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n\r\n    private async _sendLoop(): Promise<void> {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n\r\n                break;\r\n            }\r\n\r\n            this._sendBufferedData = new PromiseSource();\r\n\r\n            const transportResult = this._transportResult!;\r\n            this._transportResult = undefined;\r\n\r\n            const data = typeof(this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n\r\n            this._buffer.length = 0;\r\n\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            } catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private static _concatBuffers(arrayBuffers: ArrayBuffer[]): ArrayBuffer {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n\r\n        return result.buffer;\r\n    }\r\n}\r\n\r\nclass PromiseSource {\r\n    private _resolver?: () => void;\r\n    private _rejecter!: (reason?: any) => void;\r\n    public promise: Promise<void>;\r\n\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n\r\n    public resolve(): void {\r\n        this._resolver!();\r\n    }\r\n\r\n    public reject(reason?: any): void {\r\n        this._rejecter!(reason);\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { CompletionMessage, HubMessage, IHubProtocol, InvocationMessage, MessageType, StreamItemMessage } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\n\r\nconst JSON_HUB_PROTOCOL_NAME: string = \"json\";\r\n\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol implements IHubProtocol {\r\n\r\n    /** @inheritDoc */\r\n    public readonly name: string = JSON_HUB_PROTOCOL_NAME;\r\n    /** @inheritDoc */\r\n    public readonly version: number = 1;\r\n\r\n    /** @inheritDoc */\r\n    public readonly transferFormat: TransferFormat = TransferFormat.Text;\r\n\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    public parseMessages(input: string, logger: ILogger): HubMessage[] {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n\r\n        if (!input) {\r\n            return [];\r\n        }\r\n\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message) as HubMessage;\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n\r\n        return hubMessages;\r\n    }\r\n\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    public writeMessage(message: HubMessage): string {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n\r\n    private _isInvocationMessage(message: InvocationMessage): void {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n\r\n    private _isStreamItemMessage(message: StreamItemMessage): void {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n\r\n    private _isCompletionMessage(message: CompletionMessage): void {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n\r\n    private _assertNotEmptyString(value: any, errorMessage: string): void {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\r\nimport { IHubProtocol } from \"./IHubProtocol\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\nimport { IRetryPolicy } from \"./IRetryPolicy\";\r\nimport { HttpTransportType } from \"./ITransport\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\n\r\nconst LogLevelNameMapping: {[k: string]: LogLevel} = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\n\r\nfunction parseLogLevel(name: string): LogLevel {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    } else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    /** @internal */\r\n    public protocol?: IHubProtocol;\r\n    /** @internal */\r\n    public httpConnectionOptions?: IHttpConnectionOptions;\r\n    /** @internal */\r\n    public url?: string;\r\n    /** @internal */\r\n    public logger?: ILogger;\r\n\r\n    /** If defined, this indicates the client should automatically attempt to reconnect if the connection is lost. */\r\n    /** @internal */\r\n    public reconnectPolicy?: IRetryPolicy;\r\n\r\n    /** Configures console logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {ILogger} logger An object implementing the {@link @microsoft/signalr.ILogger} interface, which will be used to write all log messages.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {string} logLevel A string representing a LogLevel setting a minimum level of messages to log.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     */\r\n    public configureLogging(logLevel: string): HubConnectionBuilder;\r\n\r\n    /** Configures custom logging for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @param {LogLevel | string | ILogger} logging A {@link @microsoft/signalr.LogLevel}, a string representing a LogLevel, or an object implementing the {@link @microsoft/signalr.ILogger} interface.\r\n     *    See {@link https://docs.microsoft.com/aspnet/core/signalr/configuration#configure-logging|the documentation for client logging configuration} for more details.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder;\r\n    public configureLogging(logging: LogLevel | string | ILogger): HubConnectionBuilder {\r\n        Arg.isRequired(logging, \"logging\");\r\n\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        } else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        } else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * The transport will be selected automatically based on what the server and client support.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {HttpTransportType} transportType The specific transport to use.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\r\n     *\r\n     * @param {string} url The URL the connection will use.\r\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\r\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n\r\n        this.url = url;\r\n\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        } else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     * By default, the client will wait 0, 2, 10 and 30 seconds respectively before trying up to 4 reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {number[]} retryDelays An array containing the delays in milliseconds before trying each reconnect attempt.\r\n     * The length of the array represents how many failed reconnect attempts it takes before the client will stop attempting to reconnect.\r\n     */\r\n    public withAutomaticReconnect(retryDelays: number[]): HubConnectionBuilder;\r\n\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to automatically attempt to reconnect if the connection is lost.\r\n     *\r\n     * @param {IRetryPolicy} reconnectPolicy An {@link @microsoft/signalR.IRetryPolicy} that controls the timing and number of reconnect attempts.\r\n     */\r\n    public withAutomaticReconnect(reconnectPolicy: IRetryPolicy): HubConnectionBuilder;\r\n    public withAutomaticReconnect(retryDelaysOrReconnectPolicy?: number[] | IRetryPolicy): HubConnectionBuilder {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        } else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    public build(): HubConnection {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n\r\n        return HubConnection.create(\r\n            connection,\r\n            this.logger || NullLogger.instance,\r\n            this.protocol || new JsonHubProtocol(),\r\n            this.reconnectPolicy);\r\n    }\r\n}\r\n\r\nfunction isLogger(logger: any): logger is ILogger {\r\n    return logger.log !== undefined;\r\n}\r\n","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// This is where we add any polyfills we'll need for the browser. It is the entry module for browser-specific builds.\r\n\r\n// Copy from Array.prototype into Uint8Array to polyfill on IE. It's OK because the implementations of indexOf and slice use properties\r\n// that exist on Uint8Array with the same name, and JavaScript is magic.\r\n// We make them 'writable' because the Buffer polyfill messes with it as well.\r\nif (!Uint8Array.prototype.indexOf) {\r\n    Object.defineProperty(Uint8Array.prototype, \"indexOf\", {\r\n        value: Array.prototype.indexOf,\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.slice) {\r\n    Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n        // wrap the slice in Uint8Array so it looks like a Uint8Array.slice call\r\n        // eslint-disable-next-line object-shorthand\r\n        value: function(start?: number, end?: number) { return new Uint8Array(Array.prototype.slice.call(this, start, end)); },\r\n        writable: true,\r\n    });\r\n}\r\nif (!Uint8Array.prototype.forEach) {\r\n    Object.defineProperty(Uint8Array.prototype, \"forEach\", {\r\n        value: Array.prototype.forEach,\r\n        writable: true,\r\n    });\r\n}\r\n\r\nexport * from \"./index\";\r\n"]}